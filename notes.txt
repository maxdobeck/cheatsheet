# tar
list contents
tar -tvf archive.tar
tar -ztvf archive.tar.gz
tar -jtvf tar.bz2

untar
tar -xvf archive.tar
tar -xvzf archive.tar.gz
tar -xvjf archive.tar.bz2

# sftp
https://www.computerhope.com/unix/sftp.htm

get a file or dir
sftp user@host:targetDir/target.zip

get a file w/ specific output path. Rename it by specifying the filename at end of destination.
sftp user@host:targetDir/target.zip /Downloads

# drives
Where is that god dang drive? How big is it? What the hell do I mount?
lsblk 
(list block devices)
df -TH 
(H flag makes it human readable)

mounting (simple)
sudo mount /dev/your_drive /home/a_user/some/place
-t if you have to specify 
the device's type.  FAT, etc
Mount just takes a device's file structure and attaches it to your local file tree. You get to pick the name/place where it is attached and accessible.

mounting (oh shit, something went wrong)
something didn't work?
- dmesg (any bad juju from the kernel gets picked up here)
- lsblk to confirm you have the right device.  Triple check
- df -TH to again confirm, check the FREE SPACE is what you expect
mess with lsblk & df as needed
- mount (to see what's current. lots of output, maybe not useful)

unmount and remove drive
sudo umount /dir/you/mounted

# vim
$:	jump to end of cur line
g_:	jump to final non-blank char at end of line 
^:	jump to first non-blank char at start of line
0:	jump to start of line


# shell
use vim like commands on command line
set -o vi

# ssh
am I locked out? Did someone try to login?
cat /var/log/auth.log
"| grep 'Failed'" to see if the auth failed due to bad pwd.

# sublime
open a file from cli
subl .
subl my-file.txt

-n or --new-window:	Open a new window
-a or --add:		Add folders to the current window

# Fallacies of Distributed Computing
https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing

The fallacies are
    The network is reliable;
    Latency is zero;
    Bandwidth is infinite;
    The network is secure;
    Topology doesn't change;
    There is one administrator;
    Transport cost is zero;
    The network is homogeneous.

Software applications are written with little error-handling on networking errors. During a network outage, such applications may stall or infinitely wait for an answer packet, permanently consuming memory or other resources. When the failed network becomes available, those applications may also fail to retry any stalled operations or require a (manual) restart.

Ignorance of network latency, and of the packet loss it can cause, induces application- and transport-layer developers to allow unbounded traffic, greatly increasing dropped packets and wasting bandwidth.

Ignorance of bandwidth limits on the part of traffic senders can result in bottlenecks.

Complacency regarding network security results in being blindsided by malicious users and programs that continually adapt to security measures.

Changes in network topology can have effects on both bandwidth and latency issues, and therefore can have similar problems.

Multiple administrators, as with subnets for rival companies, may institute conflicting policies of which senders of network traffic must be aware in order to complete their desired paths.

The "hidden" costs of building and maintaining a network or subnet are non-negligible and must consequently be noted in budgets to avoid vast shortfalls.

If a system assumes a homogeneous network, then it can lead to the same problems that result from the first three fallacies.
